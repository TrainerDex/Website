# Generated by Django 3.0.7 on 2020-06-23 19:43

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Evidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.CharField(max_length=36, verbose_name='object PK')),
                ('content_field', models.CharField(choices=[('trainer.profile', 'Trainer'), ('update.total_xp', 'Update.Total XP'), ('update.pokedex_total_caught', 'Update.Unique Species Caught'), ('update.pokedex_total_seen', 'Update.Unique Species Seen'), ('update.pokedex_gen1', 'Update.Kanto'), ('update.pokedex_gen2', 'Update.Johto'), ('update.pokedex_gen3', 'Update.Hoenn'), ('update.pokedex_gen4', 'Update.Sinnoh'), ('update.pokedex_gen5', 'Update.Unova'), ('update.pokedex_gen6', 'Update.Kalos'), ('update.pokedex_gen7', 'Update.Alola'), ('update.pokedex_gen8', 'Update.Galar'), ('update.travel_km', 'Update.Jogger | Distance Walked'), ('update.capture_total', 'Update.Collector | Pokémon Caught'), ('update.evolved_total', 'Update.Scientist'), ('update.hatched_total', 'Update.Breeder'), ('update.pokestops_visited', 'Update.Backpacker | PokéStops Visited'), ('update.big_magikarp', 'Update.Fisherman'), ('update.battle_attack_won', 'Update.Battle Girl'), ('update.battle_training_won', 'Update.Ace Trainer'), ('update.small_rattata', 'Update.Youngster'), ('update.pikachu', 'Update.Pikachu Fan'), ('update.unown', 'Update.Unown'), ('update.raid_battle_won', 'Update.Champion'), ('update.legendary_battle_won', 'Update.Battle Legend'), ('update.berries_fed', 'Update.Berry Master'), ('update.hours_defended', 'Update.Gym Leader'), ('update.challenge_quests', 'Update.Pokémon Ranger'), ('update.max_level_friends', 'Update.Idol'), ('update.trading', 'Update.Gentleman'), ('update.trading_distance', 'Update.Pilot'), ('update.great_league', 'Update.Great League Veteran'), ('update.ultra_league', 'Update.Ultra League Veteran'), ('update.master_league', 'Update.Master League Veteran'), ('update.photobomb', 'Update.Cameraman'), ('update.pokemon_purified', 'Update.Purifier'), ('update.rocket_grunts_defeated', 'Update.Hero'), ('update.buddy_best', 'Update.Best Buddy'), ('update.wayfarer', 'Update.Wayfarer'), ('update.type_normal', 'Update.Schoolkid'), ('update.type_fighting', 'Update.Black Belt'), ('update.type_flying', 'Update.Bird Keeper'), ('update.type_poison', 'Update.Punk Girl'), ('update.type_ground', 'Update.Ruin Maniac'), ('update.type_rock', 'Update.Hiker'), ('update.type_bug', 'Update.Bug Catcher'), ('update.type_ghost', 'Update.Hex Maniac'), ('update.type_steel', 'Update.Depot Agent'), ('update.type_fire', 'Update.Kindler'), ('update.type_water', 'Update.Swimmer'), ('update.type_grass', 'Update.Gardener'), ('update.type_electric', 'Update.Rocker'), ('update.type_psychic', 'Update.Psychic'), ('update.type_ice', 'Update.Skier'), ('update.type_dragon', 'Update.Dragon Tamer'), ('update.type_dark', 'Update.Delinquent'), ('update.type_fairy', 'Update.Fairy Tale Girl'), ('update.gymbadges_total', 'Update.Gym Badges'), ('update.gymbadges_gold', 'Update.Gold Gym Badges'), ('update.stardust', 'Update.Stardust')], max_length=29)),
                ('approval', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'trainerdex'), ('model__in', ['trainer', 'update'])), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='model')),
            ],
            options={
                'verbose_name': 'evidence',
                'verbose_name_plural': 'evidence',
            },
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.PositiveSmallIntegerField(choices=[(0, 'Teamless'), (1, 'Mystic'), (2, 'Valor'), (3, 'Instinct')], primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'teams',
            },
        ),
        migrations.CreateModel(
            name='PresetTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stat', models.CharField(choices=[('total_xp', 'Total XP'), ('pokedex_total_caught', 'Unique Species Caught'), ('pokedex_total_seen', 'Unique Species Seen'), ('pokedex_gen1', 'Kanto'), ('pokedex_gen2', 'Johto'), ('pokedex_gen3', 'Hoenn'), ('pokedex_gen4', 'Sinnoh'), ('pokedex_gen5', 'Unova'), ('pokedex_gen6', 'Kalos'), ('pokedex_gen7', 'Alola'), ('pokedex_gen8', 'Galar'), ('travel_km', 'Jogger | Distance Walked'), ('capture_total', 'Collector | Pokémon Caught'), ('evolved_total', 'Scientist'), ('hatched_total', 'Breeder'), ('pokestops_visited', 'Backpacker | PokéStops Visited'), ('big_magikarp', 'Fisherman'), ('battle_attack_won', 'Battle Girl'), ('battle_training_won', 'Ace Trainer'), ('small_rattata', 'Youngster'), ('pikachu', 'Pikachu Fan'), ('unown', 'Unown'), ('raid_battle_won', 'Champion'), ('legendary_battle_won', 'Battle Legend'), ('berries_fed', 'Berry Master'), ('hours_defended', 'Gym Leader'), ('challenge_quests', 'Pokémon Ranger'), ('max_level_friends', 'Idol'), ('trading', 'Gentleman'), ('trading_distance', 'Pilot'), ('great_league', 'Great League Veteran'), ('ultra_league', 'Ultra League Veteran'), ('master_league', 'Master League Veteran'), ('photobomb', 'Cameraman'), ('pokemon_purified', 'Purifier'), ('rocket_grunts_defeated', 'Hero'), ('buddy_best', 'Best Buddy'), ('wayfarer', 'Wayfarer'), ('type_normal', 'Schoolkid'), ('type_fighting', 'Black Belt'), ('type_flying', 'Bird Keeper'), ('type_poison', 'Punk Girl'), ('type_ground', 'Ruin Maniac'), ('type_rock', 'Hiker'), ('type_bug', 'Bug Catcher'), ('type_ghost', 'Hex Maniac'), ('type_steel', 'Depot Agent'), ('type_fire', 'Kindler'), ('type_water', 'Swimmer'), ('type_grass', 'Gardener'), ('type_electric', 'Rocker'), ('type_psychic', 'Psychic'), ('type_ice', 'Skier'), ('type_dragon', 'Dragon Tamer'), ('type_dark', 'Delinquent'), ('type_fairy', 'Fairy Tale Girl'), ('gymbadges_total', 'Gym Badges'), ('gymbadges_gold', 'Gold Gym Badges')], max_length=22, verbose_name='stat')),
                ('_target', models.CharField(max_length=16, verbose_name='target')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'target (Preset)',
                'verbose_name_plural': 'target (Preset)',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='trainer', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('id', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='(Deprecated) ID')),
                ('start_date', models.DateField(help_text='The date you created your Pokémon Go account. This can be found under TOTAL ACTIVITY in-game.', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(2016, 7, 5))], verbose_name='Start Date')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last Modified')),
                ('banned', models.BooleanField(default=False, verbose_name='Banned')),
                ('faction', models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, to='trainerdex.Faction', verbose_name='teams')),
            ],
            options={
                'verbose_name': 'trainer',
                'verbose_name_plural': 'trainers',
            },
        ),
        migrations.CreateModel(
            name='TrainerCode',
            fields=[
                ('trainer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='trainer_code', serialize=False, to='trainerdex.Trainer', verbose_name='trainer')),
                ('code', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('(\\d{4}[\\s\\-]?){3}', 'Trainer Code must be 12 digits long and contain only numbers and whitespace.', 'invalid'), django.core.validators.MinLengthValidator(12), django.core.validators.MaxLengthValidator(15)], verbose_name='Trainer Code')),
                ('privacy_setting', models.CharField(choices=[('600', 'Private'), ('640', 'Share with groups only'), ('604', 'Share with website only'), ('644', 'Share with groups and website')], default='640', max_length=3)),
            ],
            options={
                'verbose_name': 'Trainer Code',
                'verbose_name_plural': 'Trainer Codes',
            },
        ),
        migrations.CreateModel(
            name='Update',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time Updated')),
                ('submission_date', models.DateTimeField(auto_now_add=True, verbose_name='Submission Datetime')),
                ('data_source', models.CharField(choices=[('?', None), ('cs_social_twitter', 'Twitter (Found)'), ('cs_social_facebook', 'Facebook (Found)'), ('cs_social_youtube', 'YouTube (Found)'), ('cs_?', 'Sourced Elsewhere'), ('ts_social_discord', 'Discord'), ('ts_social_twitter', 'Twitter'), ('ts_direct', 'Directly told (via text)'), ('web_quick', 'Quick Update (Web)'), ('web_detailed', 'Detailed Update (Web)'), ('ts_registration', 'Registration'), ('ss_registration', 'Registration w/ Screenshot'), ('ss_generic', 'Generic Screenshot'), ('ss_ocr', 'OCR Screenshot'), ('com.nianticlabs.pokemongo.friends', 'In Game Friends'), ('com.pokeassistant.trainerstats', 'Poké Assistant'), ('com.pokenavbot.profiles', 'PokeNav'), ('tl40datateam.spreadsheet', 'Tl40 Data Team (Legacy)'), ('com.tl40data.website', 'Tl40 Data Team'), ('com.pkmngots.import', 'Third Saturday')], default='?', max_length=256, verbose_name='Source')),
                ('total_xp', models.PositiveIntegerField(null=True, verbose_name='Total XP')),
                ('pokedex_total_caught', models.PositiveIntegerField(blank=True, null=True, verbose_name='Unique Species Caught')),
                ('pokedex_total_seen', models.PositiveIntegerField(blank=True, null=True, verbose_name='Unique Species Seen')),
                ('pokedex_gen1', models.PositiveIntegerField(blank=True, help_text='Register 100 Kanto region Pokémon in the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(151)], verbose_name='Kanto')),
                ('pokedex_gen2', models.PositiveIntegerField(blank=True, help_text='Register 70 Pokémon first discovered in the Johto region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Johto')),
                ('pokedex_gen3', models.PositiveIntegerField(blank=True, help_text='Register 90 Pokémon first discovered in the Hoenn region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(134)], verbose_name='Hoenn')),
                ('pokedex_gen4', models.PositiveIntegerField(blank=True, help_text='Register 80 Pokémon first discovered in the Sinnoh region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(107)], verbose_name='Sinnoh')),
                ('pokedex_gen5', models.PositiveIntegerField(blank=True, help_text='Register 100 Pokémon first discovered in the Unova region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(156)], verbose_name='Unova')),
                ('pokedex_gen6', models.PositiveIntegerField(blank=True, help_text='Register x Pokémon first discovered in the Kalos region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Kalos')),
                ('pokedex_gen7', models.PositiveIntegerField(blank=True, help_text='Register x Pokémon first discovered in the Alola region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(88)], verbose_name='Alola')),
                ('pokedex_gen8', models.PositiveIntegerField(blank=True, help_text='Register x Pokémon first discovered in the Galar region to the Pokédex.', null=True, validators=[django.core.validators.MaxValueValidator(87)], verbose_name='Galar')),
                ('travel_km', models.DecimalField(blank=True, decimal_places=2, help_text='Walk 1,000 km', max_digits=16, null=True, verbose_name='Jogger | Distance Walked')),
                ('capture_total', models.PositiveIntegerField(blank=True, help_text='Catch 2000 Pokémon.', null=True, verbose_name='Collector | Pokémon Caught')),
                ('evolved_total', models.PositiveIntegerField(blank=True, help_text='Evolve 200 Pokémon.', null=True, verbose_name='Scientist')),
                ('hatched_total', models.PositiveIntegerField(blank=True, help_text='Hatch 500 eggs.', null=True, verbose_name='Breeder')),
                ('pokestops_visited', models.PositiveIntegerField(blank=True, help_text='Visit 2000 PokéStops.', null=True, verbose_name='Backpacker | PokéStops Visited')),
                ('big_magikarp', models.PositiveIntegerField(blank=True, help_text='Catch 300 big Magikarp.', null=True, verbose_name='Fisherman')),
                ('battle_attack_won', models.PositiveIntegerField(blank=True, help_text='Win 1000 Gym battles.', null=True, verbose_name='Battle Girl')),
                ('battle_training_won', models.PositiveIntegerField(blank=True, help_text='Train 1000 times.', null=True, verbose_name='Ace Trainer')),
                ('small_rattata', models.PositiveIntegerField(blank=True, help_text='Catch 300 tiny Rattata.', null=True, verbose_name='Youngster')),
                ('pikachu', models.PositiveIntegerField(blank=True, help_text='Catch 300 Pikachu.', null=True, verbose_name='Pikachu Fan')),
                ('unown', models.PositiveIntegerField(blank=True, help_text='Catch 26 Unown.', null=True, validators=[django.core.validators.MaxValueValidator(28)], verbose_name='Unown')),
                ('raid_battle_won', models.PositiveIntegerField(blank=True, help_text='Win 1000 Raids.', null=True, verbose_name='Champion')),
                ('legendary_battle_won', models.PositiveIntegerField(blank=True, help_text='Win 1000 Legendary Raids.', null=True, verbose_name='Battle Legend')),
                ('berries_fed', models.PositiveIntegerField(blank=True, help_text='Feed 1000 Berries at Gyms.', null=True, verbose_name='Berry Master')),
                ('hours_defended', models.PositiveIntegerField(blank=True, help_text='Defend Gyms for 1000 hours.', null=True, verbose_name='Gym Leader')),
                ('challenge_quests', models.PositiveIntegerField(blank=True, help_text='Complete 1000 Field Research tasks.', null=True, verbose_name='Pokémon Ranger')),
                ('max_level_friends', models.PositiveIntegerField(blank=True, help_text='Become Best Friends with 3 Trainers.', null=True, verbose_name='Idol')),
                ('trading', models.PositiveIntegerField(blank=True, help_text='Trade 1000 Pokémon.', null=True, verbose_name='Gentleman')),
                ('trading_distance', models.PositiveIntegerField(blank=True, help_text='Earn 1000000 km across the distance of all Pokémon trades.', null=True, verbose_name='Pilot')),
                ('great_league', models.PositiveIntegerField(blank=True, help_text='Win 200 Trainer Battles in the Great League.', null=True, verbose_name='Great League Veteran')),
                ('ultra_league', models.PositiveIntegerField(blank=True, help_text='Win 200 Trainer Battles in the Ultra League.', null=True, verbose_name='Ultra League Veteran')),
                ('master_league', models.PositiveIntegerField(blank=True, help_text='Win 200 Trainer Battles in the Master League.', null=True, verbose_name='Master League Veteran')),
                ('photobomb', models.PositiveIntegerField(blank=True, help_text='Have 200 surprise encounters in AR Snapshot.', null=True, verbose_name='Cameraman')),
                ('pokemon_purified', models.PositiveIntegerField(blank=True, help_text='Purify 500 Shadow Pokémon.', null=True, verbose_name='Purifier')),
                ('rocket_grunts_defeated', models.PositiveIntegerField(blank=True, help_text='Defeat 1000 Team GO Rocket Grunts.', null=True, verbose_name='Hero')),
                ('buddy_best', models.PositiveIntegerField(blank=True, help_text='Have 100 Best Buddies.', null=True, verbose_name='Best Buddy')),
                ('wayfarer', models.PositiveIntegerField(blank=True, help_text='Earn 1000 Wayfarer Agreements', null=True, verbose_name='Wayfarer')),
                ('type_normal', models.PositiveIntegerField(blank=True, help_text='Catch 200 Normal-type Pokémon', null=True, verbose_name='Schoolkid')),
                ('type_fighting', models.PositiveIntegerField(blank=True, help_text='Catch 200 Fighting-type Pokémon', null=True, verbose_name='Black Belt')),
                ('type_flying', models.PositiveIntegerField(blank=True, help_text='Catch 200 Flying-type Pokémon', null=True, verbose_name='Bird Keeper')),
                ('type_poison', models.PositiveIntegerField(blank=True, help_text='Catch 200 Poison-type Pokémon', null=True, verbose_name='Punk Girl')),
                ('type_ground', models.PositiveIntegerField(blank=True, help_text='Catch 200 Ground-type Pokémon', null=True, verbose_name='Ruin Maniac')),
                ('type_rock', models.PositiveIntegerField(blank=True, help_text='Catch 200 Rock-type Pokémon', null=True, verbose_name='Hiker')),
                ('type_bug', models.PositiveIntegerField(blank=True, help_text='Catch 200 Bug-type Pokémon', null=True, verbose_name='Bug Catcher')),
                ('type_ghost', models.PositiveIntegerField(blank=True, help_text='Catch 200 Ghost-type Pokémon', null=True, verbose_name='Hex Maniac')),
                ('type_steel', models.PositiveIntegerField(blank=True, help_text='Catch 200 Steel-type Pokémon', null=True, verbose_name='Depot Agent')),
                ('type_fire', models.PositiveIntegerField(blank=True, help_text='Catch 200 Fire-type Pokémon', null=True, verbose_name='Kindler')),
                ('type_water', models.PositiveIntegerField(blank=True, help_text='Catch 200 Water-type Pokémon', null=True, verbose_name='Swimmer')),
                ('type_grass', models.PositiveIntegerField(blank=True, help_text='Catch 200 Grass-type Pokémon', null=True, verbose_name='Gardener')),
                ('type_electric', models.PositiveIntegerField(blank=True, help_text='Catch 200 Electric-type Pokémon', null=True, verbose_name='Rocker')),
                ('type_psychic', models.PositiveIntegerField(blank=True, help_text='Catch 200 Pychic-type Pokémon', null=True, verbose_name='Psychic')),
                ('type_ice', models.PositiveIntegerField(blank=True, help_text='Catch 200 Ice-type Pokémon', null=True, verbose_name='Skier')),
                ('type_dragon', models.PositiveIntegerField(blank=True, help_text='Catch 200 Dragon-type Pokémon', null=True, verbose_name='Dragon Tamer')),
                ('type_dark', models.PositiveIntegerField(blank=True, help_text='Catch 200 Dark-type Pokémon', null=True, verbose_name='Delinquent')),
                ('type_fairy', models.PositiveIntegerField(blank=True, help_text='Catch 200 Fairy-type Pokémon', null=True, verbose_name='Fairy Tale Girl')),
                ('gymbadges_total', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(1000)], verbose_name='Gym Badges')),
                ('gymbadges_gold', models.PositiveIntegerField(blank=True, null=True, verbose_name='Gold Gym Badges')),
                ('stardust', models.PositiveIntegerField(blank=True, null=True, verbose_name='Stardust')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainerdex.Trainer', verbose_name='trainer')),
            ],
            options={
                'verbose_name': 'update',
                'verbose_name_plural': 'updates',
                'ordering': ['-update_time'],
                'get_latest_by': 'update_time',
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='name')),
                ('stat', models.CharField(choices=[('total_xp', 'Total XP'), ('pokedex_total_caught', 'Unique Species Caught'), ('pokedex_total_seen', 'Unique Species Seen'), ('pokedex_gen1', 'Kanto'), ('pokedex_gen2', 'Johto'), ('pokedex_gen3', 'Hoenn'), ('pokedex_gen4', 'Sinnoh'), ('pokedex_gen5', 'Unova'), ('pokedex_gen6', 'Kalos'), ('pokedex_gen7', 'Alola'), ('pokedex_gen8', 'Galar'), ('travel_km', 'Jogger | Distance Walked'), ('capture_total', 'Collector | Pokémon Caught'), ('evolved_total', 'Scientist'), ('hatched_total', 'Breeder'), ('pokestops_visited', 'Backpacker | PokéStops Visited'), ('big_magikarp', 'Fisherman'), ('battle_attack_won', 'Battle Girl'), ('battle_training_won', 'Ace Trainer'), ('small_rattata', 'Youngster'), ('pikachu', 'Pikachu Fan'), ('unown', 'Unown'), ('raid_battle_won', 'Champion'), ('legendary_battle_won', 'Battle Legend'), ('berries_fed', 'Berry Master'), ('hours_defended', 'Gym Leader'), ('challenge_quests', 'Pokémon Ranger'), ('max_level_friends', 'Idol'), ('trading', 'Gentleman'), ('trading_distance', 'Pilot'), ('great_league', 'Great League Veteran'), ('ultra_league', 'Ultra League Veteran'), ('master_league', 'Master League Veteran'), ('photobomb', 'Cameraman'), ('pokemon_purified', 'Purifier'), ('rocket_grunts_defeated', 'Hero'), ('buddy_best', 'Best Buddy'), ('wayfarer', 'Wayfarer'), ('type_normal', 'Schoolkid'), ('type_fighting', 'Black Belt'), ('type_flying', 'Bird Keeper'), ('type_poison', 'Punk Girl'), ('type_ground', 'Ruin Maniac'), ('type_rock', 'Hiker'), ('type_bug', 'Bug Catcher'), ('type_ghost', 'Hex Maniac'), ('type_steel', 'Depot Agent'), ('type_fire', 'Kindler'), ('type_water', 'Swimmer'), ('type_grass', 'Gardener'), ('type_electric', 'Rocker'), ('type_psychic', 'Psychic'), ('type_ice', 'Skier'), ('type_dragon', 'Dragon Tamer'), ('type_dark', 'Delinquent'), ('type_fairy', 'Fairy Tale Girl'), ('gymbadges_total', 'Gym Badges'), ('gymbadges_gold', 'Gold Gym Badges')], max_length=22, verbose_name='stat')),
                ('_target', models.CharField(max_length=16, verbose_name='target')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainerdex.Trainer', verbose_name='trainer')),
            ],
            options={
                'verbose_name': 'target',
                'verbose_name_plural': 'targets',
                'ordering': ['stat', '_target'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PresetTargetGroup',
            fields=[
                ('slug', models.SlugField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('children', models.ManyToManyField(to='trainerdex.PresetTarget')),
            ],
            options={
                'verbose_name': 'group of targets',
                'verbose_name_plural': 'groups of targets',
            },
        ),
        migrations.CreateModel(
            name='EvidenceImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(height_field='height', upload_to='', width_field='width')),
                ('evidence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='trainerdex.Evidence', verbose_name='evidence')),
            ],
        ),
        migrations.AddConstraint(
            model_name='evidence',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_pk', 'content_field'), name='unique_request'),
        ),
    ]
