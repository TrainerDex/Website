# Generated by Django 2.2.27 on 2022-03-16 19:31

import datetime
import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import exclusivebooleanfield.fields
from django.conf import settings
from django.contrib.postgres.operations import CreateCollation
from django.db import migrations, models

import pokemongo.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0001_squashed_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        CreateCollation(
            "case_insensitive",
            provider="icu",
            locale="und-u-ks-level2",
            deterministic=False,
        ),
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("de-DE", "German"),
                            ("en-US", "English"),
                            ("es-ES", "Spanish"),
                            ("fr-FR", "French"),
                            ("it-IT", "Italian"),
                            ("ja-JP", "Japanese"),
                            ("ko-KR", "Korean"),
                            ("nl-NL", "Dutch"),
                            ("nl-BE", "Dutch, Belgium"),
                            ("ro-RO", "Romanian"),
                            ("ru-RU", "Russian"),
                            ("pt-BR", "Brazilian Portuguese"),
                            ("th-TH", "Thai"),
                            ("zh-HK", "Traditional Chinese"),
                        ],
                        default="en-US",
                        max_length=5,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        choices=[
                            ("Africa/Abidjan", "Africa/Abidjan"),
                            ("Africa/Accra", "Africa/Accra"),
                            ("Africa/Addis_Ababa", "Africa/Addis_Ababa"),
                            ("Africa/Algiers", "Africa/Algiers"),
                            ("Africa/Asmara", "Africa/Asmara"),
                            ("Africa/Bamako", "Africa/Bamako"),
                            ("Africa/Bangui", "Africa/Bangui"),
                            ("Africa/Banjul", "Africa/Banjul"),
                            ("Africa/Bissau", "Africa/Bissau"),
                            ("Africa/Blantyre", "Africa/Blantyre"),
                            ("Africa/Brazzaville", "Africa/Brazzaville"),
                            ("Africa/Bujumbura", "Africa/Bujumbura"),
                            ("Africa/Cairo", "Africa/Cairo"),
                            ("Africa/Casablanca", "Africa/Casablanca"),
                            ("Africa/Ceuta", "Africa/Ceuta"),
                            ("Africa/Conakry", "Africa/Conakry"),
                            ("Africa/Dakar", "Africa/Dakar"),
                            ("Africa/Dar_es_Salaam", "Africa/Dar_es_Salaam"),
                            ("Africa/Djibouti", "Africa/Djibouti"),
                            ("Africa/Douala", "Africa/Douala"),
                            ("Africa/El_Aaiun", "Africa/El_Aaiun"),
                            ("Africa/Freetown", "Africa/Freetown"),
                            ("Africa/Gaborone", "Africa/Gaborone"),
                            ("Africa/Harare", "Africa/Harare"),
                            ("Africa/Johannesburg", "Africa/Johannesburg"),
                            ("Africa/Juba", "Africa/Juba"),
                            ("Africa/Kampala", "Africa/Kampala"),
                            ("Africa/Khartoum", "Africa/Khartoum"),
                            ("Africa/Kigali", "Africa/Kigali"),
                            ("Africa/Kinshasa", "Africa/Kinshasa"),
                            ("Africa/Lagos", "Africa/Lagos"),
                            ("Africa/Libreville", "Africa/Libreville"),
                            ("Africa/Lome", "Africa/Lome"),
                            ("Africa/Luanda", "Africa/Luanda"),
                            ("Africa/Lubumbashi", "Africa/Lubumbashi"),
                            ("Africa/Lusaka", "Africa/Lusaka"),
                            ("Africa/Malabo", "Africa/Malabo"),
                            ("Africa/Maputo", "Africa/Maputo"),
                            ("Africa/Maseru", "Africa/Maseru"),
                            ("Africa/Mbabane", "Africa/Mbabane"),
                            ("Africa/Mogadishu", "Africa/Mogadishu"),
                            ("Africa/Monrovia", "Africa/Monrovia"),
                            ("Africa/Nairobi", "Africa/Nairobi"),
                            ("Africa/Ndjamena", "Africa/Ndjamena"),
                            ("Africa/Niamey", "Africa/Niamey"),
                            ("Africa/Nouakchott", "Africa/Nouakchott"),
                            ("Africa/Ouagadougou", "Africa/Ouagadougou"),
                            ("Africa/Porto-Novo", "Africa/Porto-Novo"),
                            ("Africa/Sao_Tome", "Africa/Sao_Tome"),
                            ("Africa/Tripoli", "Africa/Tripoli"),
                            ("Africa/Tunis", "Africa/Tunis"),
                            ("Africa/Windhoek", "Africa/Windhoek"),
                            ("America/Adak", "America/Adak"),
                            ("America/Anchorage", "America/Anchorage"),
                            ("America/Anguilla", "America/Anguilla"),
                            ("America/Antigua", "America/Antigua"),
                            ("America/Araguaina", "America/Araguaina"),
                            ("America/Argentina/Buenos_Aires", "America/Argentina/Buenos_Aires"),
                            ("America/Argentina/Catamarca", "America/Argentina/Catamarca"),
                            ("America/Argentina/Cordoba", "America/Argentina/Cordoba"),
                            ("America/Argentina/Jujuy", "America/Argentina/Jujuy"),
                            ("America/Argentina/La_Rioja", "America/Argentina/La_Rioja"),
                            ("America/Argentina/Mendoza", "America/Argentina/Mendoza"),
                            ("America/Argentina/Rio_Gallegos", "America/Argentina/Rio_Gallegos"),
                            ("America/Argentina/Salta", "America/Argentina/Salta"),
                            ("America/Argentina/San_Juan", "America/Argentina/San_Juan"),
                            ("America/Argentina/San_Luis", "America/Argentina/San_Luis"),
                            ("America/Argentina/Tucuman", "America/Argentina/Tucuman"),
                            ("America/Argentina/Ushuaia", "America/Argentina/Ushuaia"),
                            ("America/Aruba", "America/Aruba"),
                            ("America/Asuncion", "America/Asuncion"),
                            ("America/Atikokan", "America/Atikokan"),
                            ("America/Bahia", "America/Bahia"),
                            ("America/Bahia_Banderas", "America/Bahia_Banderas"),
                            ("America/Barbados", "America/Barbados"),
                            ("America/Belem", "America/Belem"),
                            ("America/Belize", "America/Belize"),
                            ("America/Blanc-Sablon", "America/Blanc-Sablon"),
                            ("America/Boa_Vista", "America/Boa_Vista"),
                            ("America/Bogota", "America/Bogota"),
                            ("America/Boise", "America/Boise"),
                            ("America/Cambridge_Bay", "America/Cambridge_Bay"),
                            ("America/Campo_Grande", "America/Campo_Grande"),
                            ("America/Cancun", "America/Cancun"),
                            ("America/Caracas", "America/Caracas"),
                            ("America/Cayenne", "America/Cayenne"),
                            ("America/Cayman", "America/Cayman"),
                            ("America/Chicago", "America/Chicago"),
                            ("America/Chihuahua", "America/Chihuahua"),
                            ("America/Costa_Rica", "America/Costa_Rica"),
                            ("America/Creston", "America/Creston"),
                            ("America/Cuiaba", "America/Cuiaba"),
                            ("America/Curacao", "America/Curacao"),
                            ("America/Danmarkshavn", "America/Danmarkshavn"),
                            ("America/Dawson", "America/Dawson"),
                            ("America/Dawson_Creek", "America/Dawson_Creek"),
                            ("America/Denver", "America/Denver"),
                            ("America/Detroit", "America/Detroit"),
                            ("America/Dominica", "America/Dominica"),
                            ("America/Edmonton", "America/Edmonton"),
                            ("America/Eirunepe", "America/Eirunepe"),
                            ("America/El_Salvador", "America/El_Salvador"),
                            ("America/Fort_Nelson", "America/Fort_Nelson"),
                            ("America/Fortaleza", "America/Fortaleza"),
                            ("America/Glace_Bay", "America/Glace_Bay"),
                            ("America/Goose_Bay", "America/Goose_Bay"),
                            ("America/Grand_Turk", "America/Grand_Turk"),
                            ("America/Grenada", "America/Grenada"),
                            ("America/Guadeloupe", "America/Guadeloupe"),
                            ("America/Guatemala", "America/Guatemala"),
                            ("America/Guayaquil", "America/Guayaquil"),
                            ("America/Guyana", "America/Guyana"),
                            ("America/Halifax", "America/Halifax"),
                            ("America/Havana", "America/Havana"),
                            ("America/Hermosillo", "America/Hermosillo"),
                            ("America/Indiana/Indianapolis", "America/Indiana/Indianapolis"),
                            ("America/Indiana/Knox", "America/Indiana/Knox"),
                            ("America/Indiana/Marengo", "America/Indiana/Marengo"),
                            ("America/Indiana/Petersburg", "America/Indiana/Petersburg"),
                            ("America/Indiana/Tell_City", "America/Indiana/Tell_City"),
                            ("America/Indiana/Vevay", "America/Indiana/Vevay"),
                            ("America/Indiana/Vincennes", "America/Indiana/Vincennes"),
                            ("America/Indiana/Winamac", "America/Indiana/Winamac"),
                            ("America/Inuvik", "America/Inuvik"),
                            ("America/Iqaluit", "America/Iqaluit"),
                            ("America/Jamaica", "America/Jamaica"),
                            ("America/Juneau", "America/Juneau"),
                            ("America/Kentucky/Louisville", "America/Kentucky/Louisville"),
                            ("America/Kentucky/Monticello", "America/Kentucky/Monticello"),
                            ("America/Kralendijk", "America/Kralendijk"),
                            ("America/La_Paz", "America/La_Paz"),
                            ("America/Lima", "America/Lima"),
                            ("America/Los_Angeles", "America/Los_Angeles"),
                            ("America/Lower_Princes", "America/Lower_Princes"),
                            ("America/Maceio", "America/Maceio"),
                            ("America/Managua", "America/Managua"),
                            ("America/Manaus", "America/Manaus"),
                            ("America/Marigot", "America/Marigot"),
                            ("America/Martinique", "America/Martinique"),
                            ("America/Matamoros", "America/Matamoros"),
                            ("America/Mazatlan", "America/Mazatlan"),
                            ("America/Menominee", "America/Menominee"),
                            ("America/Merida", "America/Merida"),
                            ("America/Metlakatla", "America/Metlakatla"),
                            ("America/Mexico_City", "America/Mexico_City"),
                            ("America/Miquelon", "America/Miquelon"),
                            ("America/Moncton", "America/Moncton"),
                            ("America/Monterrey", "America/Monterrey"),
                            ("America/Montevideo", "America/Montevideo"),
                            ("America/Montserrat", "America/Montserrat"),
                            ("America/Nassau", "America/Nassau"),
                            ("America/New_York", "America/New_York"),
                            ("America/Nipigon", "America/Nipigon"),
                            ("America/Nome", "America/Nome"),
                            ("America/Noronha", "America/Noronha"),
                            ("America/North_Dakota/Beulah", "America/North_Dakota/Beulah"),
                            ("America/North_Dakota/Center", "America/North_Dakota/Center"),
                            ("America/North_Dakota/New_Salem", "America/North_Dakota/New_Salem"),
                            ("America/Nuuk", "America/Nuuk"),
                            ("America/Ojinaga", "America/Ojinaga"),
                            ("America/Panama", "America/Panama"),
                            ("America/Pangnirtung", "America/Pangnirtung"),
                            ("America/Paramaribo", "America/Paramaribo"),
                            ("America/Phoenix", "America/Phoenix"),
                            ("America/Port-au-Prince", "America/Port-au-Prince"),
                            ("America/Port_of_Spain", "America/Port_of_Spain"),
                            ("America/Porto_Velho", "America/Porto_Velho"),
                            ("America/Puerto_Rico", "America/Puerto_Rico"),
                            ("America/Punta_Arenas", "America/Punta_Arenas"),
                            ("America/Rainy_River", "America/Rainy_River"),
                            ("America/Rankin_Inlet", "America/Rankin_Inlet"),
                            ("America/Recife", "America/Recife"),
                            ("America/Regina", "America/Regina"),
                            ("America/Resolute", "America/Resolute"),
                            ("America/Rio_Branco", "America/Rio_Branco"),
                            ("America/Santarem", "America/Santarem"),
                            ("America/Santiago", "America/Santiago"),
                            ("America/Santo_Domingo", "America/Santo_Domingo"),
                            ("America/Sao_Paulo", "America/Sao_Paulo"),
                            ("America/Scoresbysund", "America/Scoresbysund"),
                            ("America/Sitka", "America/Sitka"),
                            ("America/St_Barthelemy", "America/St_Barthelemy"),
                            ("America/St_Johns", "America/St_Johns"),
                            ("America/St_Kitts", "America/St_Kitts"),
                            ("America/St_Lucia", "America/St_Lucia"),
                            ("America/St_Thomas", "America/St_Thomas"),
                            ("America/St_Vincent", "America/St_Vincent"),
                            ("America/Swift_Current", "America/Swift_Current"),
                            ("America/Tegucigalpa", "America/Tegucigalpa"),
                            ("America/Thule", "America/Thule"),
                            ("America/Thunder_Bay", "America/Thunder_Bay"),
                            ("America/Tijuana", "America/Tijuana"),
                            ("America/Toronto", "America/Toronto"),
                            ("America/Tortola", "America/Tortola"),
                            ("America/Vancouver", "America/Vancouver"),
                            ("America/Whitehorse", "America/Whitehorse"),
                            ("America/Winnipeg", "America/Winnipeg"),
                            ("America/Yakutat", "America/Yakutat"),
                            ("America/Yellowknife", "America/Yellowknife"),
                            ("Antarctica/Casey", "Antarctica/Casey"),
                            ("Antarctica/Davis", "Antarctica/Davis"),
                            ("Antarctica/DumontDUrville", "Antarctica/DumontDUrville"),
                            ("Antarctica/Macquarie", "Antarctica/Macquarie"),
                            ("Antarctica/Mawson", "Antarctica/Mawson"),
                            ("Antarctica/McMurdo", "Antarctica/McMurdo"),
                            ("Antarctica/Palmer", "Antarctica/Palmer"),
                            ("Antarctica/Rothera", "Antarctica/Rothera"),
                            ("Antarctica/Syowa", "Antarctica/Syowa"),
                            ("Antarctica/Troll", "Antarctica/Troll"),
                            ("Antarctica/Vostok", "Antarctica/Vostok"),
                            ("Arctic/Longyearbyen", "Arctic/Longyearbyen"),
                            ("Asia/Aden", "Asia/Aden"),
                            ("Asia/Almaty", "Asia/Almaty"),
                            ("Asia/Amman", "Asia/Amman"),
                            ("Asia/Anadyr", "Asia/Anadyr"),
                            ("Asia/Aqtau", "Asia/Aqtau"),
                            ("Asia/Aqtobe", "Asia/Aqtobe"),
                            ("Asia/Ashgabat", "Asia/Ashgabat"),
                            ("Asia/Atyrau", "Asia/Atyrau"),
                            ("Asia/Baghdad", "Asia/Baghdad"),
                            ("Asia/Bahrain", "Asia/Bahrain"),
                            ("Asia/Baku", "Asia/Baku"),
                            ("Asia/Bangkok", "Asia/Bangkok"),
                            ("Asia/Barnaul", "Asia/Barnaul"),
                            ("Asia/Beirut", "Asia/Beirut"),
                            ("Asia/Bishkek", "Asia/Bishkek"),
                            ("Asia/Brunei", "Asia/Brunei"),
                            ("Asia/Chita", "Asia/Chita"),
                            ("Asia/Choibalsan", "Asia/Choibalsan"),
                            ("Asia/Colombo", "Asia/Colombo"),
                            ("Asia/Damascus", "Asia/Damascus"),
                            ("Asia/Dhaka", "Asia/Dhaka"),
                            ("Asia/Dili", "Asia/Dili"),
                            ("Asia/Dubai", "Asia/Dubai"),
                            ("Asia/Dushanbe", "Asia/Dushanbe"),
                            ("Asia/Famagusta", "Asia/Famagusta"),
                            ("Asia/Gaza", "Asia/Gaza"),
                            ("Asia/Hebron", "Asia/Hebron"),
                            ("Asia/Ho_Chi_Minh", "Asia/Ho_Chi_Minh"),
                            ("Asia/Hong_Kong", "Asia/Hong_Kong"),
                            ("Asia/Hovd", "Asia/Hovd"),
                            ("Asia/Irkutsk", "Asia/Irkutsk"),
                            ("Asia/Jakarta", "Asia/Jakarta"),
                            ("Asia/Jayapura", "Asia/Jayapura"),
                            ("Asia/Jerusalem", "Asia/Jerusalem"),
                            ("Asia/Kabul", "Asia/Kabul"),
                            ("Asia/Kamchatka", "Asia/Kamchatka"),
                            ("Asia/Karachi", "Asia/Karachi"),
                            ("Asia/Kathmandu", "Asia/Kathmandu"),
                            ("Asia/Khandyga", "Asia/Khandyga"),
                            ("Asia/Kolkata", "Asia/Kolkata"),
                            ("Asia/Krasnoyarsk", "Asia/Krasnoyarsk"),
                            ("Asia/Kuala_Lumpur", "Asia/Kuala_Lumpur"),
                            ("Asia/Kuching", "Asia/Kuching"),
                            ("Asia/Kuwait", "Asia/Kuwait"),
                            ("Asia/Macau", "Asia/Macau"),
                            ("Asia/Magadan", "Asia/Magadan"),
                            ("Asia/Makassar", "Asia/Makassar"),
                            ("Asia/Manila", "Asia/Manila"),
                            ("Asia/Muscat", "Asia/Muscat"),
                            ("Asia/Nicosia", "Asia/Nicosia"),
                            ("Asia/Novokuznetsk", "Asia/Novokuznetsk"),
                            ("Asia/Novosibirsk", "Asia/Novosibirsk"),
                            ("Asia/Omsk", "Asia/Omsk"),
                            ("Asia/Oral", "Asia/Oral"),
                            ("Asia/Phnom_Penh", "Asia/Phnom_Penh"),
                            ("Asia/Pontianak", "Asia/Pontianak"),
                            ("Asia/Pyongyang", "Asia/Pyongyang"),
                            ("Asia/Qatar", "Asia/Qatar"),
                            ("Asia/Qostanay", "Asia/Qostanay"),
                            ("Asia/Qyzylorda", "Asia/Qyzylorda"),
                            ("Asia/Riyadh", "Asia/Riyadh"),
                            ("Asia/Sakhalin", "Asia/Sakhalin"),
                            ("Asia/Samarkand", "Asia/Samarkand"),
                            ("Asia/Seoul", "Asia/Seoul"),
                            ("Asia/Shanghai", "Asia/Shanghai"),
                            ("Asia/Singapore", "Asia/Singapore"),
                            ("Asia/Srednekolymsk", "Asia/Srednekolymsk"),
                            ("Asia/Taipei", "Asia/Taipei"),
                            ("Asia/Tashkent", "Asia/Tashkent"),
                            ("Asia/Tbilisi", "Asia/Tbilisi"),
                            ("Asia/Tehran", "Asia/Tehran"),
                            ("Asia/Thimphu", "Asia/Thimphu"),
                            ("Asia/Tokyo", "Asia/Tokyo"),
                            ("Asia/Tomsk", "Asia/Tomsk"),
                            ("Asia/Ulaanbaatar", "Asia/Ulaanbaatar"),
                            ("Asia/Urumqi", "Asia/Urumqi"),
                            ("Asia/Ust-Nera", "Asia/Ust-Nera"),
                            ("Asia/Vientiane", "Asia/Vientiane"),
                            ("Asia/Vladivostok", "Asia/Vladivostok"),
                            ("Asia/Yakutsk", "Asia/Yakutsk"),
                            ("Asia/Yangon", "Asia/Yangon"),
                            ("Asia/Yekaterinburg", "Asia/Yekaterinburg"),
                            ("Asia/Yerevan", "Asia/Yerevan"),
                            ("Atlantic/Azores", "Atlantic/Azores"),
                            ("Atlantic/Bermuda", "Atlantic/Bermuda"),
                            ("Atlantic/Canary", "Atlantic/Canary"),
                            ("Atlantic/Cape_Verde", "Atlantic/Cape_Verde"),
                            ("Atlantic/Faroe", "Atlantic/Faroe"),
                            ("Atlantic/Madeira", "Atlantic/Madeira"),
                            ("Atlantic/Reykjavik", "Atlantic/Reykjavik"),
                            ("Atlantic/South_Georgia", "Atlantic/South_Georgia"),
                            ("Atlantic/St_Helena", "Atlantic/St_Helena"),
                            ("Atlantic/Stanley", "Atlantic/Stanley"),
                            ("Australia/Adelaide", "Australia/Adelaide"),
                            ("Australia/Brisbane", "Australia/Brisbane"),
                            ("Australia/Broken_Hill", "Australia/Broken_Hill"),
                            ("Australia/Darwin", "Australia/Darwin"),
                            ("Australia/Eucla", "Australia/Eucla"),
                            ("Australia/Hobart", "Australia/Hobart"),
                            ("Australia/Lindeman", "Australia/Lindeman"),
                            ("Australia/Lord_Howe", "Australia/Lord_Howe"),
                            ("Australia/Melbourne", "Australia/Melbourne"),
                            ("Australia/Perth", "Australia/Perth"),
                            ("Australia/Sydney", "Australia/Sydney"),
                            ("Canada/Atlantic", "Canada/Atlantic"),
                            ("Canada/Central", "Canada/Central"),
                            ("Canada/Eastern", "Canada/Eastern"),
                            ("Canada/Mountain", "Canada/Mountain"),
                            ("Canada/Newfoundland", "Canada/Newfoundland"),
                            ("Canada/Pacific", "Canada/Pacific"),
                            ("Europe/Amsterdam", "Europe/Amsterdam"),
                            ("Europe/Andorra", "Europe/Andorra"),
                            ("Europe/Astrakhan", "Europe/Astrakhan"),
                            ("Europe/Athens", "Europe/Athens"),
                            ("Europe/Belgrade", "Europe/Belgrade"),
                            ("Europe/Berlin", "Europe/Berlin"),
                            ("Europe/Bratislava", "Europe/Bratislava"),
                            ("Europe/Brussels", "Europe/Brussels"),
                            ("Europe/Bucharest", "Europe/Bucharest"),
                            ("Europe/Budapest", "Europe/Budapest"),
                            ("Europe/Busingen", "Europe/Busingen"),
                            ("Europe/Chisinau", "Europe/Chisinau"),
                            ("Europe/Copenhagen", "Europe/Copenhagen"),
                            ("Europe/Dublin", "Europe/Dublin"),
                            ("Europe/Gibraltar", "Europe/Gibraltar"),
                            ("Europe/Guernsey", "Europe/Guernsey"),
                            ("Europe/Helsinki", "Europe/Helsinki"),
                            ("Europe/Isle_of_Man", "Europe/Isle_of_Man"),
                            ("Europe/Istanbul", "Europe/Istanbul"),
                            ("Europe/Jersey", "Europe/Jersey"),
                            ("Europe/Kaliningrad", "Europe/Kaliningrad"),
                            ("Europe/Kiev", "Europe/Kiev"),
                            ("Europe/Kirov", "Europe/Kirov"),
                            ("Europe/Lisbon", "Europe/Lisbon"),
                            ("Europe/Ljubljana", "Europe/Ljubljana"),
                            ("Europe/London", "Europe/London"),
                            ("Europe/Luxembourg", "Europe/Luxembourg"),
                            ("Europe/Madrid", "Europe/Madrid"),
                            ("Europe/Malta", "Europe/Malta"),
                            ("Europe/Mariehamn", "Europe/Mariehamn"),
                            ("Europe/Minsk", "Europe/Minsk"),
                            ("Europe/Monaco", "Europe/Monaco"),
                            ("Europe/Moscow", "Europe/Moscow"),
                            ("Europe/Oslo", "Europe/Oslo"),
                            ("Europe/Paris", "Europe/Paris"),
                            ("Europe/Podgorica", "Europe/Podgorica"),
                            ("Europe/Prague", "Europe/Prague"),
                            ("Europe/Riga", "Europe/Riga"),
                            ("Europe/Rome", "Europe/Rome"),
                            ("Europe/Samara", "Europe/Samara"),
                            ("Europe/San_Marino", "Europe/San_Marino"),
                            ("Europe/Sarajevo", "Europe/Sarajevo"),
                            ("Europe/Saratov", "Europe/Saratov"),
                            ("Europe/Simferopol", "Europe/Simferopol"),
                            ("Europe/Skopje", "Europe/Skopje"),
                            ("Europe/Sofia", "Europe/Sofia"),
                            ("Europe/Stockholm", "Europe/Stockholm"),
                            ("Europe/Tallinn", "Europe/Tallinn"),
                            ("Europe/Tirane", "Europe/Tirane"),
                            ("Europe/Ulyanovsk", "Europe/Ulyanovsk"),
                            ("Europe/Uzhgorod", "Europe/Uzhgorod"),
                            ("Europe/Vaduz", "Europe/Vaduz"),
                            ("Europe/Vatican", "Europe/Vatican"),
                            ("Europe/Vienna", "Europe/Vienna"),
                            ("Europe/Vilnius", "Europe/Vilnius"),
                            ("Europe/Volgograd", "Europe/Volgograd"),
                            ("Europe/Warsaw", "Europe/Warsaw"),
                            ("Europe/Zagreb", "Europe/Zagreb"),
                            ("Europe/Zaporozhye", "Europe/Zaporozhye"),
                            ("Europe/Zurich", "Europe/Zurich"),
                            ("GMT", "GMT"),
                            ("Indian/Antananarivo", "Indian/Antananarivo"),
                            ("Indian/Chagos", "Indian/Chagos"),
                            ("Indian/Christmas", "Indian/Christmas"),
                            ("Indian/Cocos", "Indian/Cocos"),
                            ("Indian/Comoro", "Indian/Comoro"),
                            ("Indian/Kerguelen", "Indian/Kerguelen"),
                            ("Indian/Mahe", "Indian/Mahe"),
                            ("Indian/Maldives", "Indian/Maldives"),
                            ("Indian/Mauritius", "Indian/Mauritius"),
                            ("Indian/Mayotte", "Indian/Mayotte"),
                            ("Indian/Reunion", "Indian/Reunion"),
                            ("Pacific/Apia", "Pacific/Apia"),
                            ("Pacific/Auckland", "Pacific/Auckland"),
                            ("Pacific/Bougainville", "Pacific/Bougainville"),
                            ("Pacific/Chatham", "Pacific/Chatham"),
                            ("Pacific/Chuuk", "Pacific/Chuuk"),
                            ("Pacific/Easter", "Pacific/Easter"),
                            ("Pacific/Efate", "Pacific/Efate"),
                            ("Pacific/Fakaofo", "Pacific/Fakaofo"),
                            ("Pacific/Fiji", "Pacific/Fiji"),
                            ("Pacific/Funafuti", "Pacific/Funafuti"),
                            ("Pacific/Galapagos", "Pacific/Galapagos"),
                            ("Pacific/Gambier", "Pacific/Gambier"),
                            ("Pacific/Guadalcanal", "Pacific/Guadalcanal"),
                            ("Pacific/Guam", "Pacific/Guam"),
                            ("Pacific/Honolulu", "Pacific/Honolulu"),
                            ("Pacific/Kanton", "Pacific/Kanton"),
                            ("Pacific/Kiritimati", "Pacific/Kiritimati"),
                            ("Pacific/Kosrae", "Pacific/Kosrae"),
                            ("Pacific/Kwajalein", "Pacific/Kwajalein"),
                            ("Pacific/Majuro", "Pacific/Majuro"),
                            ("Pacific/Marquesas", "Pacific/Marquesas"),
                            ("Pacific/Midway", "Pacific/Midway"),
                            ("Pacific/Nauru", "Pacific/Nauru"),
                            ("Pacific/Niue", "Pacific/Niue"),
                            ("Pacific/Norfolk", "Pacific/Norfolk"),
                            ("Pacific/Noumea", "Pacific/Noumea"),
                            ("Pacific/Pago_Pago", "Pacific/Pago_Pago"),
                            ("Pacific/Palau", "Pacific/Palau"),
                            ("Pacific/Pitcairn", "Pacific/Pitcairn"),
                            ("Pacific/Pohnpei", "Pacific/Pohnpei"),
                            ("Pacific/Port_Moresby", "Pacific/Port_Moresby"),
                            ("Pacific/Rarotonga", "Pacific/Rarotonga"),
                            ("Pacific/Saipan", "Pacific/Saipan"),
                            ("Pacific/Tahiti", "Pacific/Tahiti"),
                            ("Pacific/Tarawa", "Pacific/Tarawa"),
                            ("Pacific/Tongatapu", "Pacific/Tongatapu"),
                            ("Pacific/Wake", "Pacific/Wake"),
                            ("Pacific/Wallis", "Pacific/Wallis"),
                            ("US/Alaska", "US/Alaska"),
                            ("US/Arizona", "US/Arizona"),
                            ("US/Central", "US/Central"),
                            ("US/Eastern", "US/Eastern"),
                            ("US/Hawaii", "US/Hawaii"),
                            ("US/Mountain", "US/Mountain"),
                            ("US/Pacific", "US/Pacific"),
                            ("UTC", "UTC"),
                        ],
                        default="UTC",
                        max_length=30,
                    ),
                ),
                ("name", models.CharField(max_length=70)),
                ("description", models.TextField(blank=True, null=True)),
                ("handle", models.SlugField(unique=True)),
                (
                    "privacy_public",
                    models.BooleanField(
                        default=False,
                        help_text="By default, this is off. Turn this on to share your community with the world.",
                        verbose_name="Publicly Viewable",
                    ),
                ),
                (
                    "privacy_public_join",
                    models.BooleanField(
                        default=False,
                        help_text="By default, this is off. Turn this on to make your community free to join. No invites required.",
                        verbose_name="Publicly Joinable",
                    ),
                ),
                (
                    "privacy_tournaments",
                    models.BooleanField(
                        default=False,
                        help_text="By default, this is off. Turn this on to share your tournament results with the world.",
                        verbose_name="Tournament: Publicly Viewable",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community",
                "verbose_name_plural": "Communities",
            },
        ),
        migrations.CreateModel(
            name="ProfileBadge",
            fields=[
                ("slug", models.SlugField(primary_key=True, serialize=False)),
                ("title", models.CharField(db_index=True, max_length=20)),
                ("description", models.CharField(db_index=True, max_length=240)),
                ("badge", models.ImageField(upload_to=pokemongo.models.get_path_for_badges)),
            ],
            options={
                "verbose_name": "Badge",
                "verbose_name_plural": "Badges",
            },
        ),
        migrations.CreateModel(
            name="Trainer",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="The date you created your Pokémon Go account.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(datetime.date(2016, 7, 5))],
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "faction",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No Team"),
                            (1, "Team Mystic"),
                            (2, "Team Valor"),
                            (3, "Team Instinct"),
                        ],
                        null=True,
                        verbose_name="Team",
                    ),
                ),
                (
                    "last_cheated",
                    models.DateField(
                        blank=True,
                        help_text="When did this Trainer last cheat?",
                        null=True,
                        verbose_name="Last Cheated",
                    ),
                ),
                (
                    "statistics",
                    models.BooleanField(
                        default=True,
                        help_text="Would you like to be shown on the leaderboard? Ticking this box gives us permission to process your data.",
                        verbose_name="Stats",
                    ),
                ),
                ("daily_goal", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "total_goal",
                    models.BigIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(100)],
                    ),
                ),
                (
                    "trainer_code",
                    models.CharField(
                        blank=True,
                        help_text="Fancy sharing your trainer code? (This information is public.)",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "(\\d{4}\\s?){3}",
                                "Trainer Code must be 12 digits long and contain only numbers and whitespace.",
                                "invalid",
                            )
                        ],
                        verbose_name="Trainer Code",
                    ),
                ),
                (
                    "country_iso",
                    models.CharField(
                        blank=True,
                        help_text="Where are you based?",
                        max_length=2,
                        null=True,
                        verbose_name="Country",
                    ),
                ),
                ("verified", models.BooleanField(default=False, verbose_name="Verified")),
                (
                    "last_modified",
                    models.DateTimeField(auto_now=True, verbose_name="Last Modified"),
                ),
                ("event_10b", models.BooleanField(default=False)),
                ("event_1k_users", models.BooleanField(default=False)),
                (
                    "legacy_40",
                    models.BooleanField(
                        default=False,
                        help_text="Achieve level 40 by December 31, 2020.",
                        verbose_name="Legacy 40",
                    ),
                ),
                (
                    "verification",
                    models.ImageField(
                        blank=True,
                        upload_to=lambda instance, filename: "",
                        verbose_name="Screenshot",
                    ),
                ),
                (
                    "owner",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trainer",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trainer",
                "verbose_name_plural": "Trainers",
            },
        ),
        migrations.CreateModel(
            name="Update",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID"),
                ),
                (
                    "update_time",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Time Updated"),
                ),
                (
                    "submission_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Submission Datetime"),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("?", None),
                            ("cs_social_twitter", "Twitter (Found)"),
                            ("cs_social_facebook", "Facebook (Found)"),
                            ("cs_social_youtube", "YouTube (Found)"),
                            ("cs_?", "Sourced Elsewhere"),
                            ("ts_social_discord", "Discord"),
                            ("ts_social_twitter", "Twitter"),
                            ("ts_direct", "Directly told (via text)"),
                            ("web_quick", "Quick Update (Web)"),
                            ("web_detailed", "Detailed Update (Web)"),
                            ("ts_registration", "Registration"),
                            ("ss_registration", "Registration w/ Screenshot"),
                            ("ss_generic", "Generic Screenshot"),
                            ("ss_ocr", "OCR Screenshot"),
                            ("com.nianticlabs.pokemongo.friends", "In Game Friends"),
                            ("com.pokeassistant.trainerstats", "Poké Assistant"),
                            ("com.pokenavbot.profiles", "PokeNav"),
                            ("tl40datateam.spreadsheet", "Tl40 Data Team (Legacy)"),
                            ("com.tl40data.website", "Tl40 Data Team"),
                            ("com.pkmngots.import", "Third Saturday"),
                        ],
                        default="?",
                        max_length=256,
                        verbose_name="Source",
                    ),
                ),
                (
                    "screenshot",
                    models.ImageField(
                        blank=True,
                        help_text="This should be your TOTAL XP screenshot.",
                        upload_to=lambda instance, filename: "",
                        verbose_name="Screenshot",
                    ),
                ),
                (
                    "double_check_confirmation",
                    models.BooleanField(
                        default=False,
                        help_text="This will silence some errors.",
                        verbose_name="I have double checked this information and it is correct.",
                    ),
                ),
                (
                    "total_xp",
                    models.BigIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(100)],
                        verbose_name="Total XP",
                    ),
                ),
                (
                    "pokedex_caught",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the POKÉDEX button in your game. It should then be listed at the top of the screen.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Unique Species Caught",
                    ),
                ),
                (
                    "pokedex_seen",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the POKÉDEX button in your game. It should then be listed at the top of the screen.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Unique Species Seen",
                    ),
                ),
                (
                    "badge_travel_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Walk 10,000 km.",
                        max_digits=16,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Jogger",
                    ),
                ),
                (
                    "badge_pokedex_entries",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 151 Kanto region Pokémon in the Pokédex.",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(151),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Kanto",
                    ),
                ),
                (
                    "badge_capture_total",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Catch 50000 Pokémon.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Collector",
                    ),
                ),
                (
                    "badge_evolved_total",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Evolve 2000 Pokémon.",
                        null=True,
                        verbose_name="Scientist",
                    ),
                ),
                (
                    "badge_hatched_total",
                    models.PositiveIntegerField(
                        blank=True, help_text="Hatch 2500 eggs.", null=True, verbose_name="Breeder"
                    ),
                ),
                (
                    "badge_pokestops_visited",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Visit 50000 PokéStops.",
                        null=True,
                        verbose_name="Backpacker",
                    ),
                ),
                (
                    "badge_unique_pokestops",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Visit 2000 unique PokéStops.",
                        null=True,
                        verbose_name="Sightseer",
                    ),
                ),
                (
                    "badge_big_magikarp",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 1000 big Magikarp.",
                        null=True,
                        verbose_name="Fisher",
                    ),
                ),
                (
                    "badge_battle_attack_won",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Win 4000 Gym battles.",
                        null=True,
                        verbose_name="Battle Girl",
                    ),
                ),
                (
                    "badge_battle_training_won",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Train 2000 times.",
                        null=True,
                        verbose_name="Ace Trainer",
                    ),
                ),
                (
                    "badge_small_rattata",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 1000 tiny Rattata.",
                        null=True,
                        verbose_name="Youngster",
                    ),
                ),
                (
                    "badge_pikachu",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 1000 Pikachu.",
                        null=True,
                        verbose_name="Pikachu Fan",
                    ),
                ),
                (
                    "badge_unown",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 28 Unown.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(28)],
                        verbose_name="Unown",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen2",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 100 Pokémon first discovered in the Johto region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(100)],
                        verbose_name="Johto",
                    ),
                ),
                (
                    "badge_raid_battle_won",
                    models.PositiveIntegerField(
                        blank=True, help_text="Win 2000 raids.", null=True, verbose_name="Champion"
                    ),
                ),
                (
                    "badge_legendary_battle_won",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Win 2000 Legendary raids.",
                        null=True,
                        verbose_name="Battle Legend",
                    ),
                ),
                (
                    "badge_berries_fed",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Feed 15000 Berries at Gyms.",
                        null=True,
                        verbose_name="Berry Master",
                    ),
                ),
                (
                    "badge_hours_defended",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Defend Gyms for 15000 hours.",
                        null=True,
                        verbose_name="Gym Leader",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen3",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 135 Pokémon first discovered in the Hoenn region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(135)],
                        verbose_name="Hoenn",
                    ),
                ),
                (
                    "badge_challenge_quests",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Complete 2500 Field Research tasks.",
                        null=True,
                        verbose_name="Pokémon Ranger",
                    ),
                ),
                (
                    "badge_max_level_friends",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Become Best Friends with 20 Trainers.",
                        null=True,
                        verbose_name="Idol",
                    ),
                ),
                (
                    "badge_trading",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Trade 2500 Pokémon.",
                        null=True,
                        verbose_name="Gentleman",
                    ),
                ),
                (
                    "badge_trading_distance",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Earn 10000000 km across the distance of all Pokémon trades.",
                        null=True,
                        verbose_name="Pilot",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen4",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 107 Pokémon first discovered in the Sinnoh region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(107)],
                        verbose_name="Sinnoh",
                    ),
                ),
                (
                    "badge_great_league",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Win 1000 Trainer Battles in the Great League.",
                        null=True,
                        verbose_name="Great League Veteran",
                    ),
                ),
                (
                    "badge_ultra_league",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Win 1000 Trainer Battles in the Ultra League.",
                        null=True,
                        verbose_name="Ultra League Veteran",
                    ),
                ),
                (
                    "badge_master_league",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Win 1000 Trainer Battles in the Master League.",
                        null=True,
                        verbose_name="Master League Veteran",
                    ),
                ),
                (
                    "badge_photobomb",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Have 400 surprise encounters in GO Snapshot.",
                        null=True,
                        verbose_name="Cameraman",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen5",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 156 Pokémon first discovered in the Unova region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(156)],
                        verbose_name="Unova",
                    ),
                ),
                (
                    "badge_pokemon_purified",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Purify 1000 Shadow Pokémon.",
                        null=True,
                        verbose_name="Purifier",
                    ),
                ),
                (
                    "badge_rocket_grunts_defeated",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Defeat 2000 Team GO Rocket Grunts.",
                        null=True,
                        verbose_name="Hero",
                    ),
                ),
                (
                    "badge_rocket_giovanni_defeated",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Defeat the Team GO Rocket Boss 50 times. ",
                        null=True,
                        verbose_name="Ultra Hero",
                    ),
                ),
                (
                    "badge_buddy_best",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Have 200 Best Buddies.",
                        null=True,
                        verbose_name="Best Buddy",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen6",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 72 Pokémon first discovered in the Kalos region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(72)],
                        verbose_name="Kalos",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen7",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 88 Pokémon first discovered in the Alola region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(88)],
                        verbose_name="Alola",
                    ),
                ),
                (
                    "badge_pokedex_entries_gen8",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Register 89 Pokémon first discovered in the Alola region to the Pokédex.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(89)],
                        verbose_name="Galar",
                    ),
                ),
                (
                    "badge_7_day_streaks",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Achieve a Pokémon catch streak or PokéStop spin streak of seven days 100 times.",
                        null=True,
                        verbose_name="Triathlete",
                    ),
                ),
                (
                    "badge_unique_raid_bosses_defeated",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Defeat 150 different species of Pokémon in raids.",
                        null=True,
                        verbose_name="Rising Star",
                    ),
                ),
                (
                    "badge_raids_with_friends",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Win 2000 raids with a friend.",
                        null=True,
                        verbose_name="Rising Star Duo",
                    ),
                ),
                (
                    "badge_pokemon_caught_at_your_lures",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Use a Lure Module to help another Trainer catch a Pokémon.",
                        null=True,
                        verbose_name="Picnicker",
                    ),
                ),
                (
                    "badge_wayfarer",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Earn 1500 Wayfarer Agreements",
                        null=True,
                        verbose_name="Wayfarer",
                    ),
                ),
                (
                    "badge_total_mega_evos",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Mega Evolve a Pokémon 1000 times.",
                        null=True,
                        verbose_name="Successor",
                    ),
                ),
                (
                    "badge_unique_mega_evos",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Mega Evolve 46 different species of Pokémon.",
                        null=True,
                        verbose_name="Mega Evolution Guru",
                    ),
                ),
                (
                    "battle_hub_stats_wins",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the Battle button in your game.",
                        null=True,
                        verbose_name="Wins",
                    ),
                ),
                (
                    "battle_hub_stats_battles",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the Battle button in your game.",
                        null=True,
                        verbose_name="Battles",
                    ),
                ),
                (
                    "battle_hub_stats_stardust",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the Battle button in your game.",
                        null=True,
                        verbose_name="Stardust Earned",
                    ),
                ),
                (
                    "battle_hub_stats_streak",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the Battle button in your game.",
                        null=True,
                        verbose_name="Longest Streak",
                    ),
                ),
                (
                    "badge_type_normal",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Normal-type Pokémon.",
                        null=True,
                        verbose_name="Schoolkid",
                    ),
                ),
                (
                    "badge_type_fighting",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Fighting-type Pokémon.",
                        null=True,
                        verbose_name="Black Belt",
                    ),
                ),
                (
                    "badge_type_flying",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Flying-type Pokémon.",
                        null=True,
                        verbose_name="Bird Keeper",
                    ),
                ),
                (
                    "badge_type_poison",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Poison-type Pokémon.",
                        null=True,
                        verbose_name="Punk Girl",
                    ),
                ),
                (
                    "badge_type_ground",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Ground-type Pokémon.",
                        null=True,
                        verbose_name="Ruin Maniac",
                    ),
                ),
                (
                    "badge_type_rock",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Rock-type Pokémon.",
                        null=True,
                        verbose_name="Hiker",
                    ),
                ),
                (
                    "badge_type_bug",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Bug-type Pokémon.",
                        null=True,
                        verbose_name="Bug Catcher",
                    ),
                ),
                (
                    "badge_type_ghost",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Ghost-type Pokémon.",
                        null=True,
                        verbose_name="Hex Maniac",
                    ),
                ),
                (
                    "badge_type_steel",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Steel-type Pokémon.",
                        null=True,
                        verbose_name="Rail Staff",
                    ),
                ),
                (
                    "badge_type_fire",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Fire-type Pokémon.",
                        null=True,
                        verbose_name="Kindler",
                    ),
                ),
                (
                    "badge_type_water",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Water-type Pokémon.",
                        null=True,
                        verbose_name="Swimmer",
                    ),
                ),
                (
                    "badge_type_grass",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Grass-type Pokémon.",
                        null=True,
                        verbose_name="Gardener",
                    ),
                ),
                (
                    "badge_type_electric",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Electric-type Pokémon.",
                        null=True,
                        verbose_name="Rocker",
                    ),
                ),
                (
                    "badge_type_psychic",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Psychic-type Pokémon.",
                        null=True,
                        verbose_name="Psychic",
                    ),
                ),
                (
                    "badge_type_ice",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Ice-type Pokémon.",
                        null=True,
                        verbose_name="Skier",
                    ),
                ),
                (
                    "badge_type_dragon",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Dragon-type Pokémon.",
                        null=True,
                        verbose_name="Dragon Tamer",
                    ),
                ),
                (
                    "badge_type_dark",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Dark-type Pokémon.",
                        null=True,
                        verbose_name="Delinquent",
                    ),
                ),
                (
                    "badge_type_fairy",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Catch 200 Fairy-type Pokémon.",
                        null=True,
                        verbose_name="Fairy Tale Girl",
                    ),
                ),
                (
                    "gymbadges_gold",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="You can find this by clicking the List button under the Gym Badges category on your profile in game, and then counting how many are gold.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(1000)],
                        verbose_name="Gold Gym Badges",
                    ),
                ),
                (
                    "trainer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pokemongo.Trainer",
                        verbose_name="Trainer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Update",
                "verbose_name_plural": "Updates",
                "ordering": ["-update_time"],
                "get_latest_by": "update_time",
            },
        ),
        migrations.CreateModel(
            name="ProfileBadgeHoldership",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("awarded_on", models.DateTimeField(auto_now_add=True)),
                ("reason_given", models.CharField(max_length=64)),
                (
                    "awarded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="badges_awarded",
                        to="pokemongo.Trainer",
                    ),
                ),
                (
                    "badge",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="pokemongo.ProfileBadge"),
                ),
                (
                    "trainer",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="pokemongo.Trainer"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="profilebadge",
            name="members",
            field=models.ManyToManyField(through="pokemongo.ProfileBadgeHoldership", to="pokemongo.Trainer"),
        ),
        migrations.CreateModel(
            name="Nickname",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                (
                    "nickname",
                    models.CharField(
                        db_collation="case_insensitive",
                        db_index=True,
                        max_length=15,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z0-9]{3,15}$",
                                "Only letters and numbers are allowed.",
                                "invalid",
                            )
                        ],
                        verbose_name="Nickname",
                    ),
                ),
                ("active", exclusivebooleanfield.fields.ExclusiveBooleanField(on=("trainer",))),
                (
                    "trainer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pokemongo.Trainer",
                        verbose_name="Trainer",
                    ),
                ),
            ],
            options={
                "ordering": ["nickname"],
            },
        ),
        migrations.CreateModel(
            name="CommunityMembershipDiscord",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                (
                    "sync_members",
                    models.BooleanField(
                        default=True,
                        help_text="Members in this Discord are automatically included in the community.",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="pokemongo.Community"),
                ),
                (
                    "discord",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.DiscordGuild"),
                ),
                (
                    "exclude_roles",
                    models.ManyToManyField(
                        blank=True,
                        related_name="exclude_roles_community_membership_discord",
                        to="core.DiscordRole",
                    ),
                ),
                (
                    "include_roles",
                    models.ManyToManyField(
                        blank=True,
                        related_name="include_roles_community_membership_discord",
                        to="core.DiscordRole",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Discord Connection",
                "verbose_name_plural": "Community Discord Connections",
            },
        ),
        migrations.AddField(
            model_name="community",
            name="memberships_discord",
            field=models.ManyToManyField(
                blank=True, through="pokemongo.CommunityMembershipDiscord", to="core.DiscordGuild"
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="memberships_personal",
            field=models.ManyToManyField(blank=True, to="pokemongo.Trainer"),
        ),
    ]
